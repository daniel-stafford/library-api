Design & document the APIs for a library management system:

Library has books, users, authors:

Total:
  Misc:
   ☐  Use next with paramter for error handling, rather than thorwing new error.
   ☐ Add mock and spying to jest testing
   ☐ Use mock with different situations rather than creating sepereate functions
  Books:
    Have different attributes such as:
    ✔ ISBN @done(20-02-28 15:33)
    ✔ title @done(20-02-28 15:33)
    ✔ descriptions @done(20-03-03 15:37)
    ✔ publisher @done(20-03-03 15:37)
    ✔ authors @done(20-03-03 15:37)
    ✔ status (available, borrowed) _make isBorrowed: boolean_ @done(20-03-03 15:37)
    ✔ borrower ID @done(20-03-03 15:37)
    ✔ published date @done(20-03-06 12:52)
    ✔ borrow date @done(20-03-03 20:26)
    ✔ return date @done(20-03-06 12:52)

  Authors:
    Attributes (I made these up):
      ✔ unique ID @done(20-02-28 15:37) _I'll just use object ID_
      ✔ first name @done(20-02-28 15:37)
      ✔ last name @done(20-02-28 15:37)

  Users:
    Attributes such as:
      ✔ unique ID @done(20-02-28 16:21)
      ✔ first name @done(20-02-28 16:21)
      ✔ last name @done(20-02-28 16:21)
      ✔ email @done(20-02-28 16:21)
      ✔ isAdmin @done(20-02-28 16:21)
      ✘ password (save as hashed string) @cancelled(20-03-05 11:01)
  Admin:
    ✔ Special users with more privileges @done(20-02-28 16:22)

  Relationships:
    ✔ Authors to Books @done(20-03-02 13:12)
    ✔ User to Books @done(20-03-05 11:01)

  Use cases:
    Books:
      Get list of all books with/without pagination:
          ✔ implementation @done(20-03-03 13:31)
          ✔ testing service success @done(20-03-03 13:31)
          ✔ testing service fail @done(20-03-03 13:53)
          ✔ testing controller success @done(20-03-06 12:51)
          ✔ testing controller fail @done(20-03-06 12:51)

      Get list of books, filtering (search) by:
        ✔ title @done(20-03-06 14:36)
        ☐ author
        ✔ status @done(20-03-10 13:14)
        ☐ categories
            ☐ implementation
            ☐ testing service success
            ☐ testing service fail
            ☐ testing controller success
            ☐ testing controller fail

      Get a book by ISBN:
          ✔ implementation @done(20-03-03 11:59)
          ✔ testing service success @done(20-03-03 10:49)
          ✔ testing service fail @done(20-03-03 13:31)
          ✔ testing controller success @done(20-03-06 12:51)
          ✔ testing controller fail @done(20-03-06 12:51)

       Lend a book to a user:
          ✔ implementation @done(20-03-03 15:36)
          ✔ testing service success @done(20-03-03 20:25)
          ✔ testing service fail @done(20-03-03 20:25)
          ✔ testing controller success @done(20-03-06 12:51)
          ✔ testing controller fail @done(20-03-06 12:51)

       Return a borrowed book back to the library:
          ✔ implementation @done(20-03-03 21:48)
          ✔ testing service success @done(20-03-03 21:48)
          ✔ testing service fail @done(20-03-06 12:51)
          ✔ testing controller success @done(20-03-06 12:51)
          ✔ testing controller fail @done(20-03-06 12:51)

    Admin (currently mixed in respective authors, books routes):
      Add a new book:
          ✔ implementation @done(20-03-03 12:00)
          ✔ testing service success @done(20-03-03 10:49)
          ✔ testing service fail @done(20-03-03 10:49)
          ✔ testing controller success @done(20-03-06 12:51)
          ✔ testing controller fail @done(20-03-06 12:51)

      Delete a book:
          ✔ implementation @done(20-03-03 12:00)
          ✔ testing service success @done(20-03-03 13:39)
          ✔ testing service fail @done(20-03-03 13:52)
          ✔ testing controller success @done(20-03-06 12:51)
          ✔ testing controller fail @done(20-03-06 12:51)


      Update info of an author:
        ✔ implementation @done(20-03-03 12:00)
        ✔ testing service success @done(20-03-06 12:51)
        ✔ testing service fail @done(20-03-06 12:51)
        ✔ testing controller success @done(20-03-06 12:51)
        ✔ testing controller fail @done(20-03-06 12:51)

      Create an new author:
          ✔ implementation @done(20-03-03 15:37)
          ✔ testing service success @done(20-03-06 12:51)
          ✔ testing service fail @done(20-03-06 12:51)
          ✔ testing controller success @done(20-03-06 12:51)
          ✔ testing controller fail @done(20-03-06 12:51)

      Delete an author:
          ✔ implementation @done(20-03-03 15:37)
          ✔ testing service success @done(20-03-06 12:52)
          ✔ testing service fail @done(20-03-06 12:52)
          ✔ testing controller success @done(20-03-06 12:52)
          ✔ testing controller fail @done(20-03-06 12:52)

      Users:
        Sign up a new user (username, first name, last name, email):
            ✔ implementation with Google @done(20-03-10 13:14)
            ☐ testing service success
            ☐ testing service fail
            ☐ testing controller success
            ☐ testing controller fail

        Sign in user with username/password:
            ✔ implementation with Google @started(20-03-05 11:02) @done(20-03-10 13:15) @lasted(5d2h13m6s)
            ☐ testing service success
            ☐ testing service fail
            ☐ testing controller success
            ☐ testing controller fail

       ✘ Update user profile (first name, last name, email): @cancelled(20-03-05 11:02)
            ✘ implementation @cancelled(20-03-05 11:02)
            ✘ testing service success @cancelled(20-03-05 11:02)
            ✘ testing service fail @cancelled(20-03-05 11:02)
            ✘ testing controller success @cancelled(20-03-05 11:02)
            ✘ testing controller fail @cancelled(20-03-05 11:02)

        ✘ Forget password request: @cancelled(20-03-05 11:02)
            ✘ implementation @cancelled(20-03-05 11:02)
            ✘ testing service success @cancelled(20-03-05 11:02)
            ✘ testing service fail @cancelled(20-03-05 11:02)
            ✘ testing controller success @cancelled(20-03-05 11:02)
            ✘ testing controller fail @cancelled(20-03-05 11:02)

        ✘ Change password (username, old password, new password): @cancelled(20-03-05 11:02)
            ✘ implementation @cancelled(20-03-05 11:02)
            ✘ testing service success @cancelled(20-03-05 11:02)
            ✘ testing service fail @cancelled(20-03-05 11:02)
            ✘ testing controller success @cancelled(20-03-05 11:02)
            ✘ testing controller fail @cancelled(20-03-05 11:02)

    Frontend:
      ✔ Create google login, @done(20-03-10 16:38)
      ✔ Set token in local storage @done(20-03-10 16:39)
      ✔ Set logged in user to redux store @done(20-03-10 16:39)
      ✔ Conditionally render based on whether user is admin or not @done(20-03-10 16:40)
      ✔ Add ability to logout (clear currentUser in store and token in local storage) @done(20-03-10 20:48)
      ✔ Add auth to all api routes (except for google-auth) @done(20-03-11 08:27)
      ✔ Use saga to set redux store to local storage @done(20-03-11 09:35)
      ✔ Init store from local storage @done(20-03-11 09:35)
      ☐ Create navbar with pages for non+admin
      ☐ Conditionally render side bar based on whether admin or not
      ☐ Try a get all book request
      ☐ Log user out when token expires
      ☐

      ☐ Get users borrowed books
